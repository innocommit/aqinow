[project]
name = "backend"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "alembic>=1.15.2",
    "bcrypt==4.0.1",
    "email-validator>=2.2.0",
    "fastapi[standard]>=0.115.12",
    "google-generativeai>=0.8.5",
    "paho-mqtt>=2.1.0",
    "passlib[bcrypt]>=1.7.4",
    "psycopg[binary]>=3.2.7",
    "pydantic-settings>=2.9.1",
    "pyjwt>=2.10.1",
    "python-multipart>=0.0.20",
    "slowapi>=0.1.9",
    "sqlmodel>=0.0.24",
]

[tool.uv]
link-mode = "copy"

[dependency-groups]
dev = [
    "coverage>=7.8.0",
    "mypy>=1.15.0",
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "ruff>=0.11.7",
    "types-passlib>=1.7.7.20250408",
]

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]

[tool.ruff]
target-version = "py310"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
