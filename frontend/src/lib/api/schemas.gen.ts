// This file is auto-generated by @hey-api/openapi-ts

export const BaseResponseSchema = {
    properties: {
        code: {
            type: 'integer',
            title: 'Code',
            default: 200
        },
        message: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Message',
            default: 'Thành công'
        }
    },
    type: 'object',
    title: 'BaseResponse'
} as const;

export const CreateUserRequestSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Email'
        },
        password: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Password'
        },
        name: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Name'
        },
        role: {
            '$ref': '#/components/schemas/Role'
        }
    },
    type: 'object',
    required: ['email', 'password', 'name', 'role'],
    title: 'CreateUserRequest'
} as const;

export const ErrorResponseSchema = {
    properties: {
        errorCode: {
            type: 'integer',
            title: 'Errorcode'
        },
        message: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Message'
        }
    },
    type: 'object',
    required: ['errorCode', 'message'],
    title: 'ErrorResponse'
} as const;

export const GetUsersResponseSchema = {
    properties: {
        code: {
            type: 'integer',
            title: 'Code',
            default: 200
        },
        message: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Message',
            default: 'Thành công'
        },
        data: {
            items: {
                '$ref': '#/components/schemas/UserResponse'
            },
            type: 'array',
            title: 'Data'
        },
        total: {
            type: 'integer',
            title: 'Total'
        },
        totalPage: {
            type: 'integer',
            title: 'Totalpage'
        }
    },
    type: 'object',
    required: ['data', 'total', 'totalPage'],
    title: 'GetUsersResponse'
} as const;

export const LoginRequestSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Email'
        },
        password: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Password'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'LoginRequest'
} as const;

export const RoleSchema = {
    type: 'string',
    enum: ['ADMIN', 'USER'],
    title: 'Role'
} as const;

export const SortOrderSchema = {
    type: 'string',
    enum: ['asc', 'desc'],
    title: 'SortOrder'
} as const;

export const TokenResponseSchema = {
    properties: {
        code: {
            type: 'integer',
            title: 'Code',
            default: 200
        },
        message: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Message',
            default: 'Thành công'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        role: {
            '$ref': '#/components/schemas/Role'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        accessToken: {
            type: 'string',
            title: 'Accesstoken'
        }
    },
    type: 'object',
    required: ['name', 'role', 'email', 'accessToken'],
    title: 'TokenResponse'
} as const;

export const UserResponseSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        role: {
            '$ref': '#/components/schemas/Role'
        },
        createdAt: {
            type: 'string',
            format: 'date-time',
            title: 'Createdat'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time',
            title: 'Updatedat'
        },
        deletedAt: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deletedat'
        }
    },
    type: 'object',
    required: ['id', 'name', 'email', 'role', 'createdAt', 'updatedAt'],
    title: 'UserResponse'
} as const;