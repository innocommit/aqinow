// This file is auto-generated by @hey-api/openapi-ts

export type BaseResponse = {
    code?: number;
    message?: string;
};

export type CreateUserRequest = {
    email: string;
    password: string;
    name: string;
    role: Role;
};

export type ErrorResponse = {
    errorCode: number;
    message: string;
};

export type GetUsersResponse = {
    code?: number;
    message?: string;
    data: Array<UserResponse>;
    total: number;
    totalPage: number;
};

export type LoginRequest = {
    email: string;
    password: string;
};

export type Role = 'ADMIN' | 'USER';

export const Role = {
    ADMIN: 'ADMIN',
    USER: 'USER'
} as const;

export type SortOrder = 'asc' | 'desc';

export const SortOrder = {
    ASC: 'asc',
    DESC: 'desc'
} as const;

export type TokenResponse = {
    code?: number;
    message?: string;
    name: string;
    role: Role;
    email: string;
    accessToken: string;
};

export type UserResponse = {
    id: number;
    name: string;
    email: string;
    role: Role;
    createdAt: Date;
    updatedAt: Date;
    deletedAt?: Date | null;
};

export type LoginData = {
    body: LoginRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/login';
};

export type LoginErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
    /**
     * Forbidden
     */
    403: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
    /**
     * Unprocessable Entity
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type LoginError = LoginErrors[keyof LoginErrors];

export type LoginResponses = {
    /**
     * Successful Response
     */
    200: TokenResponse;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type GetAllUsersData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: {
        page?: number;
        pageSize?: number;
        sortOrder?: SortOrder | null;
        sortKey?: string | null;
    };
    url: '/api/v1/users/';
};

export type GetAllUsersErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
    /**
     * Forbidden
     */
    403: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
    /**
     * Unprocessable Entity
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetAllUsersError = GetAllUsersErrors[keyof GetAllUsersErrors];

export type GetAllUsersResponses = {
    /**
     * Successful Response
     */
    200: GetUsersResponse;
};

export type GetAllUsersResponse = GetAllUsersResponses[keyof GetAllUsersResponses];

export type CreateUserData = {
    body: CreateUserRequest;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/users/';
};

export type CreateUserErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
    /**
     * Forbidden
     */
    403: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
    /**
     * Unprocessable Entity
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
    /**
     * Successful Response
     */
    201: BaseResponse;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type DeleteUserData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/api/v1/users/{id}';
};

export type DeleteUserErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
    /**
     * Forbidden
     */
    403: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
    /**
     * Unprocessable Entity
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors];

export type DeleteUserResponses = {
    /**
     * Successful Response
     */
    200: BaseResponse;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type ClientOptions = {
    baseUrl: 'http://127.0.0.1:8000' | (string & {});
};